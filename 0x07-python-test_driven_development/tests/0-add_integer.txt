The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import ``add_integer`` from the ``0-add_integer`` module

    >>> add_integer = __import__('0-add_integer').add_integer

Should return the sum of two integers:

    >>> add_integer(1, 2)
    3

Should return the sum with a negative integer:

    >>> add_integer(-1, 99)
    98

Should have two arguments:

    >>> add_integer(1)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'b'

Should return sum of two `floats`:

    >>> add_integer(5.00234, 10.2935)
    15

Should return sum of one `float` and one `int`:

    >>> add_integer(1, 3.145)
    4

Both arguments should be of type `int` or `float`:

    >>> add_integer('4', 10)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>> add_integer(4, '10')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
    >>> # if both are not of type `int`/`float`, just say 'a must be an integer'
    >>> add_integer([1, 2, 3], [4, 5, 6])
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Both arguments should be integers before addition occurs:

    >>> add_integer(1, 2.53)
    3

Should raise OverFlowError if float is too big:

    >>> add_integer(float('inf'), 1)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Should not convert NaN to integer:

    >>> add_integer(float('nan'), 1)
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
